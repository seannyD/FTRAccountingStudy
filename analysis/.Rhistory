geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot() +
geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
?geom_boxplot
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(size=0.2) +
geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1) +
geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = 1) +
geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = 'left') +
geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = position_nudge(x=0.1)) +
geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = position_nudge(x=0.25)) +
geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = position_nudge(x=0.25)) +
geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = position_nudge(x=0.25)) +
geom_jitter(width=0.1,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
dx[dx$gen==2,]
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = position_nudge(x=0.25)) +
geom_jitter(width=0.01,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = position_nudge(x=0.25),outlier.alpha = 1) +
geom_jitter(width=0.01,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = position_nudge(x=0.25),outlier.shape = NA) +
geom_jitter(width=0.01,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.1,position = position_nudge(x=0.2),outlier.shape = NA) +
geom_jitter(width=0.01,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.2,position = position_nudge(x=0.2),outlier.shape = NA) +
geom_jitter(width=0.01,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
contMap(compute.brlen(tA,power = 0.8),eA[paste0("t",1:4)],outline = F,direction="downwards",lims=lims)
nodelabels()
nodelabels(text=NA,pch=16)
nodelabels(text=NA,pch=16,cex=4)
tA
?heat.colors
demo.pal <-
function(n, border = if (n < 32) "light gray" else NA,
main = paste("color palettes;  n=", n),
ch.col = c("rainbow(n, start=.7, end=.1)", "heat.colors(n)",
"terrain.colors(n)", "topo.colors(n)",
"cm.colors(n)"))
{
nt <- length(ch.col)
i <- 1:n; j <- n / nt; d <- j/6; dy <- 2*d
plot(i, i+d, type = "n", yaxt = "n", ylab = "", main = main)
for (k in 1:nt) {
rect(i-.5, (k-1)*j+ dy, i+.4, k*j,
col = eval(parse(text = ch.col[k])), border = border)
text(2*j,  k * j + dy/4, ch.col[k])
}
}
n <- if(.Device == "postscript") 64 else 16
# Since for screen, larger n may give color allocation problem
demo.pal(n)
x = contMap(compute.brlen(tB,power = 0.8),eB[paste0("t",1:7)],outline = F,direction="downwards",lims=lims)
x$cols
x = contMap(compute.brlen(tA,power = 0.8),eA[paste0("t",1:4)],outline = F,direction="downwards",lims=lims)
nodelabels(text=NA,pch=16,cex=4,col = x$cols[])
eA
nodelabels(text=NA,pch=16,cex=4,col = x$cols[])
nodelabels(text=NA,pch=16,cex=4)
tiplabels(text=NA,pch=16,cex=4)
?contMap
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.2,position = position_nudge(x=0.2),outlier.shape = NA) +
geom_jitter(aes(shape=Tree),width=0.01,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()) +
xlab("Language type")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.2,position = position_nudge(x=0.2),outlier.shape = NA) +
geom_jitter(aes(shape=Tree),width=0.01,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "none") +
xlab("Language type")
contMap(compute.brlen(tC,power = 0.8),eC[paste0("t",1:3)],outline = F,direction="downwards",lims=lims)
nodelabels(text=NA,pch=18,cex=4)
tiplabels(text=NA,pch=18,cex=4)
x = contMap(compute.brlen(tA,power = 0.8),eA[paste0("t",1:4)],outline = F,direction="downwards",lims=lims)
nodelabels(text=NA,pch=16,cex=4)
tiplabels(text=NA,pch=16,cex=4)
contMap(compute.brlen(tA,power = 0.8),eA[paste0("t",1:4)],outline = F,direction="downwards",lims=lims)
nodelabels(text=NA,pch=16,cex=4)
tiplabels(text=NA,pch=16,cex=4)
plot(1:30,pch=1:30)
pdf("../results/misc/Brownian1_TreeA.pdf")
contMap(compute.brlen(tA,power = 0.8),eA[paste0("t",1:4)],outline = F,direction="downwards",lims=lims)
nodelabels(text=NA,pch=16,cex=4)
tiplabels(text=NA,pch=16,cex=4)
dev.off()
pdf("../results/misc/Brownian1_TreeB.pdf")
contMap(compute.brlen(tB,power = 0.8),eB[paste0("t",1:7)],outline = F,direction="downwards",lims=lims)
nodelabels(text=NA,pch=15,cex=4)
tiplabels(text=NA,pch=15,cex=4)
dev.off()
pdf("../results/misc/Brownian1_TreeC.pdf")
contMap(compute.brlen(tC,power = 0.8),eC[paste0("t",1:3)],outline = F,direction="downwards",lims=lims)
nodelabels(text=NA,pch=17,cex=4)
tiplabels(text=NA,pch=17,cex=4)
dev.off()
pdf("../results/misc/Brownian1_values.pdf")
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.2,position = position_nudge(x=0.2),outlier.shape = NA) +
geom_jitter(aes(shape=Tree),width=0.01,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "none") +
xlab("Language type")
dev.off()
pdf("../results/misc/Brownian1_values.pdf",width=2.5,height=4)
ggplot(dx, aes(x=L,y=E)) +
geom_boxplot(width=0.2,position = position_nudge(x=0.2),outlier.shape = NA) +
geom_jitter(aes(shape=Tree),width=0.01,height=0) +
facet_grid(rows = vars(gen)) +
theme_bw() + theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "none") +
xlab("Language type")
dev.off()
?plot_model
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7))
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7))
plotAGamma$term
plotBGamma$term
plotB2Gamma$term
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7))
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7))
pdf("../results/singleMembershipModel_GammaDist.pdf",
width=6,height=5)
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7))
dev.off()
plotBoth = function(plotA,plotB,plotB2,showB=T,xlim=c(-0.5,0.5),legend.x.pos=-0.5){
par(mar=c(3,5,4,1))
plot(xlim,c(1,15.5),type='n',yaxt='n',xlab="",ylab="")
abline(h=x_B2Points-0.16,col="gray")
points(plotA$estimate,x_APoints,pch=16,col=plotColours[1])
arrows(plotA$conf.low,x_APoints,
plotA$conf.high,x_APoints,
code=3,angle = 90,length = 0.1)
if(showB){
points(plotB$estimate,x_BPoints,
col=plotColours[2],pch=16)
arrows(plotB$conf.low,x_BPoints,
plotB$conf.high,x_BPoints,
code=3,angle = 90,length = 0.1,col=plotColours[2])
points(plotB2$estimate,
x_B2Points,
col=plotColours[3],pch=16)
arrows(plotB2$conf.low,x_B2Points,
plotB2$conf.high,x_B2Points,
code=3,angle = 90,length = 0.1,col=plotColours[3])
}
axis(2,at=x_B2Points+0.25,labels = plotA$term,las=2)
abline(v=0)
legend(legend.x.pos,19.5,bty='n',
xpd=T,legend=
c("Without language family controls",
"With language family controls",
"With language family controls (and random slopes)"),
ncol=1,
lty=1,col=plotColours,
text.col=plotColours)
}
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7),legend.x.pos=-0.65)
pdf("../results/singleMembershipModel_GammaDist.pdf",
width=6,height=5)
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7))
dev.off()
pdf("../results/singleMembershipModel_GammaDist.pdf",
width=6,height=5)
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7),legend.x.pos=-0.65)
dev.off()
x = read.csv("../results/BetaResults_OtherVariables.csv",stringsAsFactors = F)
x = read.csv("../results/BetaResults_OtherVariables.csv",stringsAsFactors = F)
x$noControlsP = x$p
x$noControlsP[x$p < 0.0001] = "p < 0.0001"
x$noControlsP[x$p >= 0.0001] = paste0("p = ",round(x$p,3))
x$wControlsP = x$p.1
x$wControlsP[x$p.1 < 0.0001] = "p < 0.0001"
x$wControlsP[x$p.1 >= 0.0001] = paste0("p = ",round(x$p.1,3))
data.frame(
label = x$Label,
NoControls = paste0(x$Beta,"(",x$noControlsP,")"),
WithControls = paste0(x$Beta.1,"(",x$wControlsP,")"),
)
round(x$p,3)
x$noControlsP = x$p
x$noControlsP[x$p < 0.0001] = "p < 0.0001"
x$noControlsP[x$p >= 0.0001] = paste0("p = ",round(x$p,3))
x$noControlsP[x$p >= 0.0001] = paste0("p = ",round(x$p[x$p >= 0.0001],3))
x$wControlsP = x$p.1
x$wControlsP[x$p.1 < 0.0001] = "p < 0.0001"
x$wControlsP[x$p.1 >= 0.0001] = paste0("p = ",round(x$p.1[x$p.1 >= 0.0001],3))
data.frame(
label = x$Label,
NoControls = paste0(x$Beta,"(",x$noControlsP,")"),
WithControls = paste0(x$Beta.1,"(",x$wControlsP,")"),
)
data.frame(
label = x$Label,
NoControls = paste0(x$Beta,"(",x$noControlsP,")"),
WithControls = paste0(x$Beta.1,"(",x$wControlsP,")")
)
data.frame(
label = x$Label,
NoControls = paste0(x$Beta," (",x$noControlsP,")"),
WithControls = paste0(x$Beta.1," (",x$wControlsP,")")
)
write.csv(x2,"../results/BetaResults_OtherVariablesB.csv")
x = read.csv("../results/BetaResults_OtherVariables.csv",stringsAsFactors = F)
x$noControlsP = x$p
x$noControlsP[x$p < 0.0001] = "p < 0.0001"
x$noControlsP[x$p >= 0.0001] = paste0("p = ",round(x$p[x$p >= 0.0001],3))
x$wControlsP = x$p.1
x$wControlsP[x$p.1 < 0.0001] = "p < 0.0001"
x$wControlsP[x$p.1 >= 0.0001] = paste0("p = ",round(x$p.1[x$p.1 >= 0.0001],3))
x2 = data.frame(
label = x$Label,
NoControls = paste0(x$Beta," (",x$noControlsP,")"),
WithControls = paste0(x$Beta.1," (",x$wControlsP,")")
)
write.csv(x2,"../results/BetaResults_OtherVariablesB.csv")
---
title: "Language and earings management: controlling for linguistic history"
output:
pdf_document:
toc: true
---
```{r echo=F,eval=F}
try(setwd("~/Documents/Bristol/FTRAccounting/FTRAccountingStudy/analysis/"))
```
```{r echo=F}
getMEText = function(r,ef, wald=NULL, showWald=F,returnText=T){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
wald.text =  paste("beta = ",est,",")
if(showWald){
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
}
begin = 'There was no significant'
if(p <0.09){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
if(returnText){
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
} else{
return(c(est,loglikDiff,df,chi,p))
}
}
```
# Introduction
This document shows the statistical procedure and R code for testing the relationship between strong/weak FTR and accrual based earnings management (AAM), with and without controls for language family.
We start by describing the variables, then showing how the data was loaded and linked to the language family data.  We then demonstrate that the AAM is best modelled with a gamma distribution (see later in the document for the same test with gaussian distributions).
The mixed effecst modelling section runs the main statistical models with and without controls for language family.
The next sections demonstrate a series of alterantive tests, including:
-  Assuming a gaussian distribution
-  A decision tree analysis that takes into account non-linear effects and interactions.
-  A visualisation of differences between language families
-  A test that uses continuous historical distances from a phylogenetic tree
-  An OLS regression with cluster robust standard errors
## Variables
Each observation in the data is a single company within a particular country.
-  `AAM`: accrual-based earnings management, following Kothari et al. (2005).
-  `strongftr`: Whether the main language of the country has a 'strong' Future Tense Reference system, according to Chen (2013).
-  `mainLanguageFamily` (constructed below): The language family of the main language(s) in the company's country.
Country-level economic predictors:
-  `invpro`: Investor protection score, based on the anti-director index from Djankov et al. (2008)
-  `ggr`: Country GDP growth rate
Country-level cultural predictors:
-  `pd`: Power distance index, based on Hofstede (2001)
-  `indiv`: Individualism/collectivism score, based on Hofstede (2001)
-  `mas`: Masculinity/femininity score, based on Hofstede (2001)
-  `ua`: Uncertainty avoidance score, based on Hofstede (2001)
-  `lto`: Long-/short-term orientation score, based on Hofstede (2001);
-  `indul`: Indulgence, based on Hofstede (2001);
Company-level economic predictors:
-  `SIZE`: Company size, measured as the natural logarithm of total assets adjusted for inflation rate
-  `BTM`: Company book value of common equity divided by common value of equity;
-  `LEV`: Company leverage, measured as short- and long- term debt divided by total assets
-  `ROA`: Company return on assets, measured as income before extraordinary items divided by total assets
-  `MEET`: Dummy variable that takes one for firm-year observations with actual annual EPS greater than or equal to consensus analyst earnings forecast, zero otherwise.
-  `LOSS`: Dummy variable that takes one for firm-year observations with negative income before extraordinary items, zero otherwise.
\clearpage
\newpage
# Load libraries
```{r warning=F,message=F}
library(lme4)
library(sjPlot)
library(REEMtree)
library(rpart)
library(rpart.plot)
library(MASS)
library(ggplot2)
library(RColorBrewer)
library(MCMCglmm)
library(ape)
library(caper)
library(stargazer)
library(dplyr)
library(lattice)
```
# Load data
```{r}
d = read.csv("../data/clean/data.csv",
fileEncoding = "utf-8",
encoding = 'utf-8')
```
Match each country to its main language and language family:
```{r}
countryMainLanguageFamily =
read.csv("../data/raw/CountryMainLanguageToLanguageFamily.csv",
stringsAsFactors = F)
d$mainLanguageFamily =
countryMainLanguageFamily[
match(as.character(d$loc),
countryMainLanguageFamily$Country.Code),
]$Family
```
Remove countries with many main language families:
```{r}
d$CountryHasManyMainLanguages = countryMainLanguageFamily[
match(as.character(d$loc),
countryMainLanguageFamily$Country.Code),
]$ManyLanguages=="Y"
d2 = d[!d$CountryHasManyMainLanguages,]
d2 = d2[!is.na(d2$AAM),]
```
Remove cases with missing data:
```{r}
keyVar = c("invpro","pd","indiv","mas",
"ua","lto","indul","ggr","SIZE",
"BTM","LEV","ROA","MEET","LOSS")
d2 = d2[complete.cases(d2[,keyVar,]),]
```
Table of languages:
```{r}
data.frame(
tapply(d2$strongftr,as.character(d2$loc),head,n=1)
)
```
Convert to factors:
```{r}
d2$mainLanguageFamily = factor(d2$mainLanguageFamily)
d2$MEET = factor(d2$MEET)
d2$LOSS = factor(d2$LOSS)
d2$strongftr = factor(d2$strongftr)
```
Scale and center varaibles:
```{r}
d2Orig = d2
# Take log of AAM
d2$logAAM = log(1+d2$AAM)
# Scale and center continuous variables
for(v in c("pd",'indiv','mas',
'ua','lto','indul','ggr',
'SIZE',"BTM","LEV","ROA")){
d2[,v] = scale(d2[,v])
}
d2$AAM.scaled = scale(d2$AAM)
```
length(unique(d2$country))
length(unique(d2$countryname))
length(unique(d2$loc))
length(unique(d2$mainLanguageFamily))
head(countryMainLanguageFamily)
head(d2$loc)
head(countryMainLanguageFamily$Country.Code)
countryMainLanguageFamily[countryMainLanguageFamily$Country.Code %in% as.character(d2$loc),]
countryMainLanguageFamily[countryMainLanguageFamily$Country.Code %in% as.character(d2$loc),]$Official.Language
length(unique(countryMainLanguageFamily[countryMainLanguageFamily$Country.Code %in% as.character(d2$loc),]$Official.Language))
head(d2[d2$loc=="CHE",])
data.frame(
tapply(d2$strongftr,as.character(d2$loc),head,n=1)
)
head(d2[d2$loc=="CHE",])
head(d2[d2$loc=="CHE",]$pcftr)
head(d2[d2$loc=="CHE",]$strongftr)
