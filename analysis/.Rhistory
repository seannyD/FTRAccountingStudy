data.frame(
tapply(d2$strongftr,as.character(d2$loc),head,n=1)
)
```
Convert to factors:
```{r}
d2$mainLanguageFamily = factor(d2$mainLanguageFamily)
d2$MEET = factor(d2$MEET)
d2$LOSS = factor(d2$LOSS)
d2$strongftr = factor(d2$strongftr)
```
Scale and center varaibles:
```{r}
d2Orig = d2
# Take log of AAM
d2$logAAM = log(1+d2$AAM)
# Scale and center continuous variables
for(v in c("pd",'indiv','mas',
'ua','lto','indul','ggr',
'SIZE',"BTM","LEV","ROA")){
d2[,v] = scale(d2[,v])
}
d2$AAM.scaled = scale(d2$AAM)
```
\newpage
# Modelling AAM with a gamma distribution
The distribution of the AAM variable is highly skewed and values below zero are not permitted:
```{r}
hist(d2$AAM)
normalDist = rnorm(n=length(d2$AAM),
mean = mean(d2$AAM),
sd = sd(d2$AAM))
ks.test(d2$AAM,normalDist)
```
Even the log-transformed variable is skewed:
```{r}
hist(d2$logAAM)
```
If we assume a Gaussian distribution, the statistical models below produce very poor fits, as can be seen in this QQ plot below:
![QQ plot for a model with a Gaussian distribution](../results/misc/qqplot_Gaussian.png)
We can compare how Beta and Gamma distributions fit the log data:
```{r echo=F,warning=F,message=F}
hist(d2$logAAM[d2$logAAM<0.5]+0.0001,
breaks=100,probability = T,
main="Log AAM")
fit.beta <- fitdistr( d2$logAAM[d2$logAAM<0.5]+0.0001,
"beta", start = list( shape1=1, shape2=0.1 ))
fit.gamma <- fitdistr(d2$logAAM[d2$logAAM<0.5]+0.0001,
"Gamma", start = list(shape=1,rate=1))
curve(dbeta(x,
shape1 =fit.beta$estimate[[1]],
shape2=fit.beta$estimate[[2]]),
from=0,to=0.5, n=500, add=T,col=2)
curve(dgamma(x,
shape =fit.gamma$estimate[[1]],
rate=fit.gamma$estimate[[2]]),
from=0,to=0.5, n=500, add=T,col=3)
# Gamma curve
curve(dgamma(x, shape=1.08, rate=10.2),
from=0,to=0.5, n=500,add=T,col=4)
# Legend
legend(0.3,8,
legend=c("Beta",
paste(c("Gamma (", round(fit.gamma$estimate,2),")"),collapse=" "),
"Gamma ( 1.08 10.2 )"),col=2:4,lty=1)
```
The Gamma distribution seems to fit best. We can compare the QQ plot of the model (fit below):
![QQ plot for the model with a Gamma distribution](../results/misc/qqplot_Gamma.png)
Still not perfect at higher levels, but much better than the Gaussian models.
\newpage
# Mixed effects modelling
Fit a model with a Gamma distribution (without language family controls, with a random intercept by family and with a random intercept and slope):
```{r cache=T}
mA0Gamma = glmer(logAAM+0.0001 ~ 1 +
pd + indiv + mas + ua + lto + indul +
ggr + invpro +
SIZE + BTM + LEV + ROA + MEET + LOSS +
(1 | fyear) +
(1 | indus),
data = d2,
family=Gamma(link="log"))
mA1Gamma = update(mA0Gamma,~.+strongftr)
```
Now we add a random intercept for each language family:
```{r cache=T}
mB0Gamma = glmer(logAAM+0.0001 ~ 1 +
pd + indiv + mas + ua + lto + indul +
ggr + invpro +
SIZE + BTM + LEV + ROA + MEET + LOSS +
(1 | fyear) +
(1 | indus) +
(1 | mainLanguageFamily),
data = d2,
family=Gamma(link="log"))
mB1Gamma = update(mB0Gamma, ~.+strongftr)
```
We also add a random slope for FTR by language family:
```{r cache=T}
mB2Gamma= glmer(logAAM+0.0001 ~ 1 +
pd + indiv + mas + ua + lto + indul +
ggr + invpro +
SIZE + BTM + LEV + ROA + MEET + LOSS +
strongftr +
(1 | fyear) +
(1 | indus) +
(1 + I(as.numeric(strongftr)) | mainLanguageFamily),
data = d2,
family=Gamma(link="log"))
```
Use model comparison to see if the random effects are explaining variance in the model:
```{r}
anova(mA1Gamma,mB1Gamma,mB2Gamma)
```
Check that the model is producing a sensible distribution:
```{r}
modelPredictions = exp(predict(mB1Gamma))-0.0001
par(mfrow=c(1,2))
hist(modelPredictions[modelPredictions<1],main="Predicted")
hist(d2$logAAM[d2$logAAM<1],main="Actual")
par(mfrow=c(1,1))
png("../results/misc/qqplot_Gamma.png")
qqnorm(resid(mB1Gamma))
qqline(resid(mB1Gamma),col=2)
dev.off()
```
Model results:
```{r}
summary(mA1Gamma)
summary(mB1Gamma)
summary(mB2Gamma)
```
\newpage
Plot fixed effects for all models (code hidden):
```{r echo=F,message=F,warning=F}
plotColours = c("black",brewer.pal(3,"Set2")[2:1])
plotAGamma = get_model_data(mA1Gamma,type="est")
plotBGamma = get_model_data(mB1Gamma,type="est")
plotB2Gamma = get_model_data(mB2Gamma,type="est")
x_B2Points = 1:length(plotB2Gamma$term)
x_BPoints = x_B2Points + 0.33
x_APoints = x_B2Points + 0.66
plotBoth = function(plotA,plotB,plotB2,showB=T,xlim=c(-0.5,0.5),legend.x.pos=-0.5){
par(mar=c(3,5,4,1))
plot(xlim,c(1,15.5),type='n',yaxt='n',xlab="",ylab="")
abline(h=x_B2Points-0.16,col="gray")
points(plotA$estimate,x_APoints,pch=16,col=plotColours[1])
arrows(plotA$conf.low,x_APoints,
plotA$conf.high,x_APoints,
code=3,angle = 90,length = 0.1)
if(showB){
points(plotB$estimate,x_BPoints,
col=plotColours[2],pch=16)
arrows(plotB$conf.low,x_BPoints,
plotB$conf.high,x_BPoints,
code=3,angle = 90,length = 0.1,col=plotColours[2])
points(plotB2$estimate,
x_B2Points,
col=plotColours[3],pch=16)
arrows(plotB2$conf.low,x_B2Points,
plotB2$conf.high,x_B2Points,
code=3,angle = 90,length = 0.1,col=plotColours[3])
}
yaxisLabels = plotA$term
labelReplacements = matrix(
c("LOSS1","LOSS",
"SIZE","LNSIZE",
"ggr","GGROWTH",
"indul","INDUL",
"lto","LTO",
"ua","UA",
"mas","MAS",
"indiv","INDIV",
"pd","PD",
"invpro","INVPRO"),ncol=2,byrow = T)
yaxisLabels = labelReplacements[match(yaxisLabels,
labelReplacements[,1]),2]
yaxisLabels[is.na(yaxisLabels)]= plotA$term[is.na(yaxisLabels)]
axis(2,at=x_B2Points+0.25,
labels = yaxisLabels ,las=2)
abline(v=0)
legend(legend.x.pos,19.5,bty='n',
xpd=T,legend=
c("Without language family controls",
"With language family controls",
"With language family controls (and random slopes)"),
ncol=1,
lty=1,col=plotColours,
text.col=plotColours)
}
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7),legend.x.pos=-0.65)
summary(m1Gamma)
summary(mA1Gamma)
plotAGamma = get_model_data(mA1Gamma,type="est")
plotAGamma
x = summary(mA1Gamma)
x$coefficients
x$coefficients[,1]
x$coefficients[,1][2:16]
plot(plotAGamma$estimate,x$coefficients[,1][2:16])
?get_model_data
plotAGamma = get_model_data(mA1Gamma,type="est", transform=NULL)
summary(plotAGamma)
plotAGamma
plotBGamma = plotAGamma
plotB2Gamma = plotAGamma
x_B2Points = 1:length(plotB2Gamma$term)
x_BPoints = x_B2Points + 0.33
x_APoints = x_B2Points + 0.66
plotBoth = function(plotA,plotB,plotB2,showB=T,xlim=c(-0.5,0.5),legend.x.pos=-0.5){
par(mar=c(3,5,4,1))
plot(xlim,c(1,15.5),type='n',yaxt='n',xlab="",ylab="")
abline(h=x_B2Points-0.16,col="gray")
points(plotA$estimate,x_APoints,pch=16,col=plotColours[1])
arrows(plotA$conf.low,x_APoints,
plotA$conf.high,x_APoints,
code=3,angle = 90,length = 0.1)
if(showB){
points(plotB$estimate,x_BPoints,
col=plotColours[2],pch=16)
arrows(plotB$conf.low,x_BPoints,
plotB$conf.high,x_BPoints,
code=3,angle = 90,length = 0.1,col=plotColours[2])
points(plotB2$estimate,
x_B2Points,
col=plotColours[3],pch=16)
arrows(plotB2$conf.low,x_B2Points,
plotB2$conf.high,x_B2Points,
code=3,angle = 90,length = 0.1,col=plotColours[3])
}
yaxisLabels = plotA$term
labelReplacements = matrix(
c("LOSS1","LOSS",
"SIZE","LNSIZE",
"ggr","GGROWTH",
"indul","INDUL",
"lto","LTO",
"ua","UA",
"mas","MAS",
"indiv","INDIV",
"pd","PD",
"invpro","INVPRO"),ncol=2,byrow = T)
yaxisLabels = labelReplacements[match(yaxisLabels,
labelReplacements[,1]),2]
yaxisLabels[is.na(yaxisLabels)]= plotA$term[is.na(yaxisLabels)]
axis(2,at=x_B2Points+0.25,
labels = yaxisLabels ,las=2)
abline(v=0)
legend(legend.x.pos,19.5,bty='n',
xpd=T,legend=
c("Without language family controls",
"With language family controls",
"With language family controls (and random slopes)"),
ncol=1,
lty=1,col=plotColours,
text.col=plotColours)
}
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7),legend.x.pos=-0.65)
plotA = plotAGamma
plotB = plotAGamma
plotC = plotAGamma
showB=T
par(mar=c(3,5,4,1))
plot(xlim,c(1,15.5),type='n',yaxt='n',xlab="",ylab="")
xlim=c(-0.5,0.5)
par(mar=c(3,5,4,1))
plot(xlim,c(1,15.5),type='n',yaxt='n',xlab="",ylab="")
abline(h=x_B2Points-0.16,col="gray")
points(plotA$estimate,x_APoints,pch=16,col=plotColours[1])
arrows(plotA$conf.low,x_APoints,
plotA$conf.high,x_APoints,
code=3,angle = 90,length = 0.1)
if(showB){
points(plotB$estimate,x_BPoints,
col=plotColours[2],pch=16)
arrows(plotB$conf.low,x_BPoints,
plotB$conf.high,x_BPoints,
code=3,angle = 90,length = 0.1,col=plotColours[2])
points(plotB2$estimate,
x_B2Points,
col=plotColours[3],pch=16)
arrows(plotB2$conf.low,x_B2Points,
plotB2$conf.high,x_B2Points,
code=3,angle = 90,length = 0.1,col=plotColours[3])
}
yaxisLabels = plotA$term
yaxisLabels
yaxisLabels = as.character(plotA$term)
yaxisLabels
labelReplacements = matrix(
c("LOSS1","LOSS",
"SIZE","LNSIZE",
"ggr","GGROWTH",
"indul","INDUL",
"lto","LTO",
"ua","UA",
"mas","MAS",
"indiv","INDIV",
"pd","PD",
"invpro","INVPRO"),ncol=2,byrow = T)
yaxisLabels = labelReplacements[match(yaxisLabels,
labelReplacements[,1]),2]
yaxisLabels
yaxisLabels[is.na(yaxisLabels)]= plotA$term[is.na(yaxisLabels)]
yaxisLabels
yaxisLabels = labelReplacements[match(yaxisLabels,
labelReplacements[,1]),2]
yaxisLabels[is.na(yaxisLabels)]= as.character(plotA$term)[is.na(yaxisLabels)]
yaxisLabels
yaxisLabels = as.character(plotA$term)
labelReplacements = matrix(
c("LOSS1","LOSS",
"SIZE","LNSIZE",
"ggr","GGROWTH",
"indul","INDUL",
"lto","LTO",
"ua","UA",
"mas","MAS",
"indiv","INDIV",
"pd","PD",
"invpro","INVPRO"),ncol=2,byrow = T)
yaxisLabels = labelReplacements[match(yaxisLabels,
labelReplacements[,1]),2]
yaxisLabels[is.na(yaxisLabels)]= as.character(plotA$term)[is.na(yaxisLabels)]
yaxisLabels
yaxisLabels = as.character(plotA$term)
labelReplacements = matrix(
c("LOSS1","LOSS",
"SIZE","LNSIZE",
"ggr","GGROWTH",
"indul","INDUL",
"lto","LTO",
"ua","UA",
"mas","MAS",
"indiv","INDIV",
"pd","PD",
"invpro","INVPRO",
"strongftr1","Strong FTR"),ncol=2,byrow = T)
yaxisLabels = labelReplacements[match(yaxisLabels,
labelReplacements[,1]),2]
yaxisLabels[is.na(yaxisLabels)]= as.character(plotA$term)[is.na(yaxisLabels)]
axis(2,at=x_B2Points+0.25,
labels = yaxisLabels ,las=2)
abline(v=0)
legend(legend.x.pos,19.5,bty='n',
xpd=T,legend=
c("Without language family controls",
"With language family controls",
"With language family controls (and random slopes)"),
ncol=1,
lty=1,col=plotColours,
text.col=plotColours)
plotBoth = function(plotA,plotB,plotB2,showB=T,xlim=c(-0.5,0.5),legend.x.pos=-0.5){
par(mar=c(3,5,4,1))
plot(xlim,c(1,15.5),type='n',yaxt='n',xlab="",ylab="")
abline(h=x_B2Points-0.16,col="gray")
points(plotA$estimate,x_APoints,pch=16,col=plotColours[1])
arrows(plotA$conf.low,x_APoints,
plotA$conf.high,x_APoints,
code=3,angle = 90,length = 0.1)
if(showB){
points(plotB$estimate,x_BPoints,
col=plotColours[2],pch=16)
arrows(plotB$conf.low,x_BPoints,
plotB$conf.high,x_BPoints,
code=3,angle = 90,length = 0.1,col=plotColours[2])
points(plotB2$estimate,
x_B2Points,
col=plotColours[3],pch=16)
arrows(plotB2$conf.low,x_B2Points,
plotB2$conf.high,x_B2Points,
code=3,angle = 90,length = 0.1,col=plotColours[3])
}
yaxisLabels = as.character(plotA$term)
labelReplacements = matrix(
c("LOSS1","LOSS",
"SIZE","LNSIZE",
"ggr","GGROWTH",
"indul","INDUL",
"lto","LTO",
"ua","UA",
"mas","MAS",
"indiv","INDIV",
"pd","PD",
"invpro","INVPRO",
"strongftr1","Strong FTR"),ncol=2,byrow = T)
yaxisLabels = labelReplacements[match(yaxisLabels,
labelReplacements[,1]),2]
yaxisLabels[is.na(yaxisLabels)]= as.character(plotA$term)[is.na(yaxisLabels)]
axis(2,at=x_B2Points+0.25,
labels = yaxisLabels ,las=2)
abline(v=0)
legend(legend.x.pos,19.5,bty='n',
xpd=T,legend=
c("Without language family controls",
"With language family controls",
"With language family controls (and random slopes)"),
ncol=1,
lty=1,col=plotColours,
text.col=plotColours)
}
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7),legend.x.pos=-0.65)
pdf("../results/singleMembershipModel_GammaDist.pdf",
width=6,height=5)
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7),legend.x.pos=-0.65)
dev.off()
plotBoth = function(plotA,plotB,plotB2,showB=T,xlim=c(-0.5,0.5),legend.x.pos=-0.5){
par(mar=c(3,5,4,1))
plot(xlim,c(1,15.5),type='n',yaxt='n',xlab="",ylab="")
abline(h=x_B2Points-0.16,col="gray")
points(plotA$estimate,x_APoints,pch=16,col=plotColours[1])
arrows(plotA$conf.low,x_APoints,
plotA$conf.high,x_APoints,
code=3,angle = 90,length = 0.1)
if(showB){
points(plotB$estimate,x_BPoints,
col=plotColours[2],pch=16)
arrows(plotB$conf.low,x_BPoints,
plotB$conf.high,x_BPoints,
code=3,angle = 90,length = 0.1,col=plotColours[2])
points(plotB2$estimate,
x_B2Points,
col=plotColours[3],pch=16)
arrows(plotB2$conf.low,x_B2Points,
plotB2$conf.high,x_B2Points,
code=3,angle = 90,length = 0.1,col=plotColours[3])
}
yaxisLabels = as.character(plotA$term)
labelReplacements = matrix(
c("LOSS1","LOSS",
"SIZE","LNSIZE",
"ggr","GGROWTH",
"indul","INDUL",
"lto","LTO",
"ua","UA",
"mas","MAS",
"indiv","INDIV",
"pd","PD",
"invpro","INVPRO",
"strongftr1","Strong FTR"),ncol=2,byrow = T)
yaxisLabels = labelReplacements[match(yaxisLabels,
labelReplacements[,1]),2]
yaxisLabels[is.na(yaxisLabels)]= as.character(plotA$term)[is.na(yaxisLabels)]
axis(2,at=x_B2Points+0.25,
labels = yaxisLabels ,las=2,cex=0.9)
abline(v=0)
legend(legend.x.pos,19.5,bty='n',
xpd=T,legend=
c("Without language family controls",
"With language family controls",
"With language family controls (and random slopes)"),
ncol=1,
lty=1,col=plotColours,
text.col=plotColours)
}
pdf("../results/singleMembershipModel_GammaDist.pdf",
width=6,height=5)
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7),legend.x.pos=-0.65)
dev.off()
plotBoth = function(plotA,plotB,plotB2,showB=T,xlim=c(-0.5,0.5),legend.x.pos=-0.5){
par(mar=c(3,6,4,1))
plot(xlim,c(1,15.5),type='n',yaxt='n',xlab="",ylab="")
abline(h=x_B2Points-0.16,col="gray")
points(plotA$estimate,x_APoints,pch=16,col=plotColours[1])
arrows(plotA$conf.low,x_APoints,
plotA$conf.high,x_APoints,
code=3,angle = 90,length = 0.1)
if(showB){
points(plotB$estimate,x_BPoints,
col=plotColours[2],pch=16)
arrows(plotB$conf.low,x_BPoints,
plotB$conf.high,x_BPoints,
code=3,angle = 90,length = 0.1,col=plotColours[2])
points(plotB2$estimate,
x_B2Points,
col=plotColours[3],pch=16)
arrows(plotB2$conf.low,x_B2Points,
plotB2$conf.high,x_B2Points,
code=3,angle = 90,length = 0.1,col=plotColours[3])
}
yaxisLabels = as.character(plotA$term)
labelReplacements = matrix(
c("LOSS1","LOSS",
"SIZE","LNSIZE",
"ggr","GGROWTH",
"indul","INDUL",
"lto","LTO",
"ua","UA",
"mas","MAS",
"indiv","INDIV",
"pd","PD",
"invpro","INVPRO",
"strongftr1","Strong FTR"),ncol=2,byrow = T)
yaxisLabels = labelReplacements[match(yaxisLabels,
labelReplacements[,1]),2]
yaxisLabels[is.na(yaxisLabels)]= as.character(plotA$term)[is.na(yaxisLabels)]
axis(2,at=x_B2Points+0.25,
labels = yaxisLabels ,las=2)
abline(v=0)
legend(legend.x.pos,19.5,bty='n',
xpd=T,legend=
c("Without language family controls",
"With language family controls",
"With language family controls (and random slopes)"),
ncol=1,
lty=1,col=plotColours,
text.col=plotColours)
}
pdf("../results/singleMembershipModel_GammaDist.pdf",
width=6,height=5)
plotBoth(plotAGamma,plotBGamma,plotB2Gamma,xlim=c(-0.7,0.7),legend.x.pos=-0.65)
dev.off()
as.character(plotA$term)
