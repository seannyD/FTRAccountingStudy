Match each country to its main language and language family:
```{r}
countryMainLanguageFamily =
read.csv("../data/raw/CountryMainLanguageToLanguageFamily.csv",
stringsAsFactors = F)
d$mainLanguageFamily =
countryMainLanguageFamily[
match(as.character(d$loc),
countryMainLanguageFamily$Country.Code),
]$Family
```
Remove countries with many main language families:
```{r}
d$CountryHasManyMainLanguages = countryMainLanguageFamily[
match(as.character(d$loc),
countryMainLanguageFamily$Country.Code),
]$ManyLanguages=="Y"
d2 = d[!d$CountryHasManyMainLanguages,]
d2 = d2[!is.na(d2$AAM),]
keyVar = c("invpro","pd","indiv","mas",
"ua","lto","indul","ggr","SIZE",
"BTM","LEV","ROA","MEET","LOSS")
d2 = d2[complete.cases(d2[,keyVar,]),]
tapply(d2$strongftr,d2$mainLanguageFamily,unique)
tapply(d2$strongftr,d2$country,unique)
tapply(d2$strongftr,d2$loc,unique)
tapply(d2$strongftr,d2$loc,head,n=1)
tapply(d2$strongftr,as.character(d2$loc),head,n=1)
c("ARE","ARG","AUS","AUT","BEL","BGR","BMU","BRA","CAD","CAN","CHE","CHL","CHN","COL","CYP","CZE","DEU","DNK","EGY","ESP","FIN","FRA","GBR","GRC","HKG","HUN","IDN","IND","IRL","ISR","ITA","JOR","JPN","KEN","KOR","LKA","LTU","LUX","LVA","MAR","MEX","MYS","NGA","NLD","NOR","NZL","PAK","PER","PHL","POL","PRT","ROU","RUS","SGP","SWE","THA","TUN","TUR","TWN","USA","VNM","ZAF","ZWE") %in% as.character(d$loc)
c("ARE","ARG","AUS","AUT","BEL","BGR","BMU","BRA","CAD","CAN","CHE","CHL","CHN","COL","CYP","CZE","DEU","DNK","EGY","ESP","FIN","FRA","GBR","GRC","HKG","HUN","IDN","IND","IRL","ISR","ITA","JOR","JPN","KEN","KOR","LKA","LTU","LUX","LVA","MAR","MEX","MYS","NGA","NLD","NOR","NZL","PAK","PER","PHL","POL","PRT","ROU","RUS","SGP","SWE","THA","TUN","TUR","TWN","USA","VNM","ZAF","ZWE") %in% as.character(d2$loc)
library(ape)
library(caper)
library(phytools)
library(MCMCglmm)
tree = read.nexus(file = "../data/raw/trees/bouckaert_et_al2012-d-place_2.NEXUS")
dplaceLangs = countryMainLanguageFamily$DPlaceLang[countryMainLanguageFamily$DPlaceLang!=""]
tree = drop.tip(tree,tree$tip.label[!tree$tip.label %in% dplaceLangs])
plot(tree)
treePrint = tree
treePrint = tree
treePrint$tip.label= gsub(" ST","",treePrint$tip.label)
treePrint$tip.label= gsub(" Mod","",treePrint$tip.label)
treePrint = ladderize(treePrint)
plot(treePrint)
treePrint = tree
treePrint$tip.label= gsub(" ST","",treePrint$tip.label)
treePrint$tip.label= gsub(" Mod","",treePrint$tip.label)
treePrint = ladderize(treePrint)
plot(treePrint)
treePrint$tip.label
treePrint = tree
treePrint$tip.label= gsub("_ST","",treePrint$tip.label)
treePrint$tip.label= gsub(")Mod","",treePrint$tip.label)
treePrint = ladderize(treePrint)
plot(treePrint)
treePrint = tree
treePrint$tip.label= gsub("_ST","",treePrint$tip.label)
treePrint$tip.label= gsub("_Mod","",treePrint$tip.label)
treePrint$tip.label= gsub("_List","",treePrint$tip.label)
treePrint = ladderize(treePrint)
plot(treePrint)
pdf("../results/tree.pdf")
plot(treePrint)
dev.off()
?plot.phylo()
plot(treePrint, root.edge=T)
ape::plot.phylo(treePrint,root.edge = T)
?lines()
lines(c(0,0.5),c(1,1))
lines(c(0,0.5),c(0,0))
points(0:10)
points(0,0)
ape::plot.phylo(treePrint,root.edge = T)
points(0,0)
points(10,0)
points(10,10)
lines(c(0,0.5),c(10,10))
lines(c(0,10),c(10,10))
lines(c(0,1000),c(10,10))
lines(c(0,100),c(10,10))
lines(c(0,100),c(15,15))
lines(c(-100,0),c(15,15))
ape::plot.phylo(treePrint,root.edge = T)
lines(c(-100,0),c(15,15))
lines(c(-100,0),c(15.5,15.5))
ape::plot.phylo(treePrint,root.edge = T)
lines(c(-100,0),c(15.5,15.5))
ape::plot.phylo(treePrint,root.edge = T)
lines(c(-200,0),c(15.5,15.5))
pdf("../results/tree.pdf")
ape::plot.phylo(treePrint,root.edge = T)
lines(c(-200,0),c(15.5,15.5))
dev.off()
ape::plot.phylo(treePrint,root.edge = T,lwd=2)
lines(c(-200,0),c(15.5,15.5))
dev.off()
ape::plot.phylo(treePrint,root.edge = T,lwd=2)
ape::plot.phylo(treePrint,root.edge = T,lwd=10)
?plot.phylo
ape::plot.phylo(treePrint,root.edge = T,edge.width=10)
ape::plot.phylo(treePrint,root.edge = T,edge.width=10,label.offset = 100)
lines(c(-200,0),c(15.5,15.5))
pdf("../results/tree.pdf")
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
lines(c(-200,0),c(15.5,15.5))
dev.off()
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
lines(c(-200,0),c(15.5,15.5),lwd=8)
pdf("../results/tree.pdf")
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
lines(c(-200,0),c(15.5,15.5),lwd=8)
dev.off()
add.scale.bar()
add.scale.bar(length=8000)
axisPhylo()
pdf("../results/tree.pdf")
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
axisPhylo()
lines(c(-200,0),c(15.5,15.5),lwd=8)
dev.off()
axisPhylo(xlab="X")
title(xlab = "X")
title(xlab = "Years")
text("Years",0,200)
?text
text(0,200,"Years")
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
text(0,200,"Years")
text(1,200,"Years")
text(20,200,"Years")
text(20,1000,"Years")
text(20,0,"Years")
text(-200,15,"Years")
text(0,15,"Years")
text(0,120,"Years")
text(0,20,"Years")
text(05,"Years")
text(0,5,"Years")
text(0,0,"Years")
text(0,0,"Years",xpd=F)
text(0,0,"Years",xpd=T)
text(2000,0,"Years",xpd=T)
text(2500,0,"Years",xpd=T)
text(3000,0,"Years before present",xpd=T)
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
text(3000,-3,"Years before present",xpd=T)
lines(c(-200,0),c(15.5,15.5),lwd=8)
axisPhylo()
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
axisPhylo()
text(3000,-3.5,"Years before present",xpd=T)
lines(c(-200,0),c(15.5,15.5),lwd=8)
pdf("../results/tree.pdf")
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
axisPhylo()
text(3000,-3.5,"Years before present",xpd=T)
lines(c(-200,0),c(15.5,15.5),lwd=8)
dev.off()
pdf("../results/tree.pdf", width=8, height=4)
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
axisPhylo()
text(3000,-3.5,"Years before present",xpd=T)
lines(c(-200,0),c(15.5,15.5),lwd=8)
dev.off()
pdf("../results/tree.pdf", width=7, height=5)
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
axisPhylo()
text(3000,-3.5,"Years before present",xpd=T)
lines(c(-200,0),c(15.5,15.5),lwd=8)
dev.off()
pdf("../results/tree.pdf", width=7, height=5.5)
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
axisPhylo()
text(3000,-3.5,"Years before present",xpd=T)
lines(c(-200,0),c(15.5,15.5),lwd=8)
dev.off()
axisPhylo(xpd=T)
pdf("../results/tree.pdf", width=7, height=5.5)
ape::plot.phylo(treePrint,root.edge = T,edge.width=8,label.offset = 100)
axisPhylo(xpd=T)
text(3000,-3.5,"Years before present",xpd=T)
lines(c(-200,0),c(15.5,15.5),lwd=8)
dev.off()
---
title: "Language and earings management: controlling for linguistic history"
output:
pdf_document:
toc: true
---
```{r echo=F,eval=F}
try(setwd("~/Documents/Bristol/FTRAccounting/FTRAccountingStudy/analysis/"))
```
```{r echo=F}
getMEText = function(r,ef, wald=NULL, showWald=F,returnText=T){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
wald.text =  paste("beta = ",est,",")
if(showWald){
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
}
begin = 'There was no significant'
if(p <0.09){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
if(returnText){
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
} else{
return(c(est,loglikDiff,df,chi,p))
}
}
```
# Introduction
Test the relationship between strong/weak FTR and AAM, with and without controls for language family.
# Load libraries
```{r warning=F,message=F}
library(lme4)
library(sjPlot)
library(REEMtree)
library(rpart)
library(rpart.plot)
library(MASS)
library(ggplot2)
library(RColorBrewer)
library(MCMCglmm)
library(ape)
library(caper)
```
# Load data
```{r}
d = read.csv("../data/clean/data.csv",
fileEncoding = "utf-8",
encoding = 'utf-8')
```
Match each country to its main language and language family:
```{r}
countryMainLanguageFamily =
read.csv("../data/raw/CountryMainLanguageToLanguageFamily.csv",
stringsAsFactors = F)
d$mainLanguageFamily =
countryMainLanguageFamily[
match(as.character(d$loc),
countryMainLanguageFamily$Country.Code),
]$Family
```
Remove countries with many main language families:
```{r}
d$CountryHasManyMainLanguages = countryMainLanguageFamily[
match(as.character(d$loc),
countryMainLanguageFamily$Country.Code),
]$ManyLanguages=="Y"
d2 = d[!d$CountryHasManyMainLanguages,]
d2 = d2[!is.na(d2$AAM),]
```
Remove cases with missing data:
```{r}
keyVar = c("invpro","pd","indiv","mas",
"ua","lto","indul","ggr","SIZE",
"BTM","LEV","ROA","MEET","LOSS")
d2 = d2[complete.cases(d2[,keyVar,]),]
```
Table of languages:
```{r}
data.frame(
tapply(d2$strongftr,as.character(d2$loc),head,n=1)
)
```
Convert to factors:
```{r}
d2$mainLanguageFamily = factor(d2$mainLanguageFamily)
d2$MEET = factor(d2$MEET)
d2$LOSS = factor(d2$LOSS)
d2$strongftr = factor(d2$strongftr)
```
Scale varaibles:
```{r}
d2Orig = d2
# Take log of AAM
d2$logAAM = log(1+d2$AAM)
#d2$logAAM = d2$logAAM - median(d2$logAAM,na.rm = T)
# Scale and center continuous variables
for(v in c("pd",'indiv','mas',
'ua','lto','indul','ggr',
'SIZE',"BTM","LEV","ROA")){
d2[,v] = scale(d2[,v])
}
d2$AAM.scaled = scale(d2$AAM)
```
\newpage
# Mixed effects modelling
## Model A: no controls for language family
Model `mA0` is a baseline model and model `mA1` adds the effect for FTR.
```{r cache=T}
mA0 = lmer(AAM.scaled ~ 1 +
invpro +
pd + indiv + mas + ua + lto + indul +
ggr +
SIZE + BTM + LEV + ROA +
MEET + LOSS +
(1 | fyear) +
(1 | indus),
data = d2)
mA1 = update(mA0,~.+strongftr)
```
Look at the estiamtes for variables within model `mA1`:
```{r}
summary(mA1)
```
Compare the fit of the two models to assess the effect of FTR:
```{r cache=T}
anova(mA0,mA1)
```
\newpage
Plot fixed effects:
```{r}
sjp.lmer(mA1,type="fe",p.kr = F)
```
\newpage
## Model B: with controls for language family
Model `mB0` is the same as `mA0`, but with controls for langauge family. Model `mB1` adds the FTR variable to the model for comparison.
```{r cache=T}
mB0= update(mA0, ~.+(1 | mainLanguageFamily))
mB1= update(mB0, ~.+strongftr)
```
Look at the estimates for `mB1`:
```{r}
summary(mB1)
```
Compare the two models to assess the significance of the FTR variable:
```{r cache=T}
anova(mB0,mB1)
```
Plot fixed effects with controls for langauge family:
```{r}
sjp.lmer(mB1,type="fe",p.kr = F)
```
## Random slopes for FTR
Test if adding a random slope for FTR by language family significantly improves the fit of the model:
```{r cache=T}
mB2 = lmer(AAM.scaled ~ 1 +
invpro +
pd + indiv + mas + ua + lto + indul +
ggr +
SIZE + BTM + LEV + ROA +
MEET + LOSS +
strongftr +
(1 | fyear) +
(1 | indus) +
(1 + strongftr | mainLanguageFamily),
data = d2)
```
```{r cache=T}
anova(mB1,mB2)
```
Yes, model fit significantly improves. The effect of FTR is even weaker:
```{r}
summary(mB2)
```
Calculate p-value for effect of FTR:
```{r}
mB2_noFTR = update(mB2, ~. - strongftr)
anova(mB2,mB2_noFTR)
```
\newpage
Plot both models (code hidden):
```{r echo=F,message=F,warning=F}
plotColours = c("black",brewer.pal(3,"Set2")[2:1])
plotA = sjp.lmer(mA1,type="fe",p.kr = F,geom.colors = c(plotColours[1],plotColours[1]),prnt.plot = F)
plotB = sjp.lmer(mB1,type="fe",p.kr = F,geom.colors = c(plotColours[2],plotColours[2]),prnt.plot = F)
plotB2 = sjp.lmer(mB2,type="fe",p.kr = F,geom.colors = c(plotColours[3],plotColours[3]),prnt.plot = F)
x_B2Points = 1:length(plotB2$data$term)
x_BPoints = x_B2Points + 0.33
x_APoints = x_B2Points + 0.66
plotBoth = function(plotA,plotB,plotB2,showB=T,xlim=c(-0.5,0.5)){
par(mar=c(3,5,4,1))
plot(xlim,c(1,15.5),type='n',yaxt='n',xlab="",ylab="")
abline(h=x_B2Points-0.16,col="gray")
points(plotA$data$estimate,x_APoints,pch=16,col=plotColours[1])
arrows(plotA$data$conf.low,x_APoints,
plotA$data$conf.high,x_APoints,
code=3,angle = 90,length = 0.1)
if(showB){
points(plotB$data$estimate,x_BPoints,
col=plotColours[2],pch=16)
arrows(plotB$data$conf.low,x_BPoints,
plotB$data$conf.high,x_BPoints,
code=3,angle = 90,length = 0.1,col=plotColours[2])
points(plotB2$data$estimate,
x_B2Points,
col=plotColours[3],pch=16)
arrows(plotB2$data$conf.low,x_B2Points,
plotB$data$conf.high,x_B2Points,
code=3,angle = 90,length = 0.1,col=plotColours[3])
}
axis(2,at=x_B2Points+0.25,labels = plotA$data$term,las=2)
abline(v=0)
legend(-0.5,19.5,bty='n',
xpd=T,legend=
c("Without language family controls",
"With language family controls",
"With langauge family controls (and random slopes)"),
ncol=1,
lty=1,col=plotColours,
text.col=plotColours)
}
plotBoth(plotA,plotB,plotB2)
pdf("../results/singleMembershipModel.pdf",
width=6,height=5)
plotBoth(plotA,plotB,plotB2)
dev.off()
pdf("../results/singleMembershipModel_AOnly.pdf",
width=6,height=5)
plotBoth(plotA,plotB,plotB2,F)
dev.off()
```
# Summary
Without a random intercept by main language family: `r getMEText(anova(mA0,mA1), "main effect of FTR",summary(mA1)$coef['strongftr1',])`
With a random intercept by main language family: `r getMEText(anova(mB0,mB1), "main effect of FTR",summary(mB1)$coef['strongftr1',])`
\newpage
# Other effects
Below are some statistics for other effects, using the same method as above:
```{r}
resOther = data.frame()
for(v in c("pd",'indiv','mas',
'ua','lto','indul','ggr',
'SIZE',"BTM","LEV","ROA")){
mAOther0 = update(mA1, paste("~ . -",v))
mAOtherAnova = anova(mAOther0,mA1)
mBOther0 = update(mB1, paste("~ . -",v))
mBOtherAnova = anova(mBOther0,mB1)
mARes = getMEText(mAOtherAnova,"X",summary(mA1)$coef[v,],returnText = F)
mBRes = getMEText(mAOtherAnova,"X",summary(mA1)$coef[v,],returnText = F)
resOther = rbind(resOther, c("No controls",mAres))
resOther = rbind(resOther, c("With Controls",mBres))
}
print(resOther)
plotA = sjp.lmer(mA1,type="fe",p.kr = F,geom.colors = c(plotColours[1],plotColours[1]),prnt.plot = F)
?sjp.lmer
resOther = data.frame()
for(v in c("pd",'indiv','mas',
'ua','lto','indul','ggr',
'SIZE',"BTM","LEV","ROA")){
mAOther0 = update(mA1, paste("~ . -",v))
mAOtherAnova = anova(mAOther0,mA1)
mBOther0 = update(mB1, paste("~ . -",v))
mBOtherAnova = anova(mBOther0,mB1)
mARes = getMEText(mAOtherAnova,"X",summary(mA1)$coef[v,],returnText = F)
mBRes = getMEText(mAOtherAnova,"X",summary(mA1)$coef[v,],returnText = F)
resOther = rbind(resOther, c("No controls",mARes))
resOther = rbind(resOther, c("With Controls",mBRes))
}
print(resOther)
mARes
mBRes
paste(v,": No controls")
resOther = data.frame(
Label = NA,
Beta = NA,
loglikDiff = NA,
df = NA,
chisq.test = NA,
p = NA, stringsAsFactors = F)
for(v in c("pd",'indiv','mas',
'ua','lto','indul','ggr',
'SIZE',"BTM","LEV","ROA")){
mAOther0 = update(mA1, paste("~ . -",v))
mAOtherAnova = anova(mAOther0,mA1)
mBOther0 = update(mB1, paste("~ . -",v))
mBOtherAnova = anova(mBOther0,mB1)
mARes = getMEText(mAOtherAnova,"X",summary(mA1)$coef[v,],returnText = F)
mBRes = getMEText(mBOtherAnova,"X",summary(mB1)$coef[v,],returnText = F)
resOther = rbind(resOther, c(paste(v,": No controls"),mARes))
resOther = rbind(resOther, c(paste(v,": With Controls"),mBRes))
}
print(resOther)
print resOther[seq(1,nrow(resOther),by=2),c("Beta","p")]
resOther[seq(1,nrow(resOther),by=2),c("Beta","p")]
cbind(
resOther[seq(1,nrow(resOther),by=2),c("Label","Beta","p")],
resOther[seq(2,nrow(resOther),by=2),c("Beta","p")])
cbind(
resOther[seq(1,nrow(resOther)-1,by=2),c("Label","Beta","p")],
resOther[seq(2,nrow(resOther),by=2),c("Beta","p")])
print(resOther)
resOther = resOther[!is.na(resOther$Label),]
print(resOther)
cbind(
resOther[seq(1,nrow(resOther)-1,by=2),c("Label","Beta","p")],
resOther[seq(2,nrow(resOther),by=2),c("Beta","p")])
write.csv(resOther2,"../results/BetaResults_OtherVariables.csv",row.names = F)
resOther2 = cbind(
resOther[seq(1,nrow(resOther)-1,by=2),c("Label","Beta","p")],
resOther[seq(2,nrow(resOther),by=2),c("Beta","p")])
write.csv(resOther2,"../results/BetaResults_OtherVariables.csv",row.names = F)
resOther
resOther2
